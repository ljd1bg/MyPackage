{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Transforms "},{"type":"codeVoice","code":"HttpRequest"},{"type":"text","text":" before sending it and "},{"type":"codeVoice","code":"HttpResponse"},{"type":"text","text":" after receiving it. Also do some stuff e.g logging when "},{"type":"codeVoice","code":"HttpInterceptor\/willSend(_:)-2jpbn"},{"type":"text","text":", "},{"type":"codeVoice","code":"HttpInterceptor\/didReceiveSuccess(_:)-70mp9"},{"type":"text","text":" or "},{"type":"codeVoice","code":"HttpInterceptor\/didReceiveFailure(_:)-7qy0s"},{"type":"text","text":" occurs."}]},{"anchor":"Creating-a-interceptor","level":2,"type":"heading","text":"Creating a interceptor"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Create your interceptor by conforming to a HttpInterceptor and implementing the protocol’s methods."}]},{"type":"codeListing","syntax":"swift","code":["struct HeaderInterceptor: HttpInterceptor {}  "]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In case of modifying a request right before sending, you need to implement your desired modification in "},{"type":"codeVoice","code":"HttpInterceptor\/modifyRequest(_:)-5h479"},{"type":"text","text":" method."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As shown below we are creating "},{"type":"codeVoice","code":"HeaderInterceptor"},{"type":"text","text":" to add a header to a "},{"type":"codeVoice","code":"URLRequest"},{"type":"text","text":" before it is executed, by implementing "},{"type":"codeVoice","code":"HttpInterceptor\/modifyRequest(_:)-5h479"},{"type":"text","text":" with the wanted modification."}]},{"type":"codeListing","syntax":"swift","code":["struct HeaderInterceptor: HttpInterceptor {","    func modifyRequest(_ request: URLRequest) -> URLRequest {","        var request = request","        request.setValue(\"en\", forHTTPHeaderField: \"Accept-Language\")","","        return request","        }","}"]},{"anchor":"Usage","level":2,"type":"heading","text":"Usage"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To use certain "},{"type":"codeVoice","code":"HttpInterceptor"},{"type":"text","text":" you just simply need to add it in array of interceptors which "},{"type":"codeVoice","code":"HttpConfiguration"},{"type":"text","text":" accepts on his instantiation."}]},{"type":"codeListing","syntax":"swift","code":["let headerInterceptor = HeaderInterceptor()","","let configuration = HttpConfiguration(","    baseUrl: URL(string: \"https:\/\/www.example.com\"), ","    interceptors: [headerInterceptor]",")","","let client = HttpClientImpl(configuration: configuration)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With all done now all requests will be modified using provided interceptor’s implementation and will have a specified header when the server received it."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Similarly like this example you can use interceptors to modify the response  before returning it to a call site.  Or use one interceptor for modifying and using "},{"type":"codeVoice","code":"HttpInterceptor\/willSend(_:)-2jpbn"},{"type":"text","text":", "},{"type":"codeVoice","code":"HttpInterceptor\/didReceiveSuccess(_:)-70mp9"},{"type":"text","text":" or "},{"type":"codeVoice","code":"HttpInterceptor\/didReceiveFailure(_:)-7qy0s"},{"type":"text","text":" methods to perform some additional side job you need."}]},{"anchor":"HttpInterceptor-as-response-validator","level":3,"type":"heading","text":"HttpInterceptor as response validator"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As "},{"type":"codeVoice","code":"HttpInterceptor"},{"type":"text","text":" has "},{"type":"codeVoice","code":"HttpInterceptor\/didReceiveSuccess(_:)-70mp9"},{"type":"text","text":"method which is called when the response is received from the server."},{"type":"text","text":"\n"},{"type":"text","text":"We can create an interceptor that implements only that method and use it for validating server responses."}]},{"type":"codeListing","syntax":"swift","code":["struct ResponseValidator: HttpInterceptor { ","    func didReceiveSuccess(_ response: HttpResponse) {","        guard (200...299) ~= response.statusCode {","            throws NetworkingError.invalidResponse(response)","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now we can add validator interceptor along with other interceptors when "},{"type":"codeVoice","code":"HttpConfiguration"},{"type":"text","text":" is created, so upcoming responses are getting validated with defined logic."}]},{"type":"codeListing","syntax":"swift","code":["let headerInterceptor = HeaderInterceptor()","let validator = ResponseValidator()","","let configuration = HttpConfiguration(","baseUrl: URL(string: \"https:\/\/www.example.com\"), ","interceptors: [headerInterceptor, validator]",")","","let client = HttpClientImpl(configuration: configuration)"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/mypackage\/httpinterceptor"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/MyPackage\/documentation\/MyPackage\/HttpInterceptor","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Used for modifying or performing side effect on request and response."}],"kind":"article","metadata":{"roleHeading":"Article","title":"HttpInterceptor","role":"article","modules":[{"name":"MyPackage"}]},"hierarchy":{"paths":[["doc:\/\/MyPackage\/documentation\/MyPackage"]]},"references":{"doc://MyPackage/documentation/MyPackage":{"role":"collection","title":"MyPackage","abstract":[],"identifier":"doc:\/\/MyPackage\/documentation\/MyPackage","kind":"symbol","type":"topic","url":"\/documentation\/mypackage"}}}