{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"HttpConnection"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"HttpConnectable"},{"type":"text","text":" which has one generic method "},{"type":"codeVoice","code":"HttpConnection\/send(_:progress:)"},{"type":"text","text":" with parameters of "},{"type":"codeVoice","code":"Request"},{"type":"text","text":" and "},{"type":"codeVoice","code":"ProgressHandler"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Generic deserialization functionality of "},{"type":"codeVoice","code":"Request"},{"type":"text","text":" allows us to define the type of response we expect to receive for each request that passes through it."}]},{"anchor":"Creating-and-sending-requests","level":2,"type":"heading","text":"Creating and sending requests"},{"type":"paragraph","inlineContent":[{"type":"text","text":"First you need to create "},{"type":"codeVoice","code":"Request"},{"type":"text","text":" with underlaying "},{"type":"codeVoice","code":"HttpRequest"},{"type":"text","text":", with expected type of returned response."}]},{"type":"codeListing","syntax":"swift","code":["let httpRequest = HttpRequest.generic(route: .get(\"person\"))","","let request = Request<Person>(underlyingRequest: httpRequest)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then instantiate "},{"type":"codeVoice","code":"HttpConnection"},{"type":"text","text":" using "},{"type":"codeVoice","code":"HttpClient"},{"type":"text","text":" and call "},{"type":"codeVoice","code":"HttpConnection\/send(_:progress:)"},{"type":"text","text":" method with created "},{"type":"codeVoice","code":"request"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let client = HttpClientImpl(configuration: config)","","let connection = HttpConnection(client: client)","","let response = try await connection.send(request)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returned "},{"type":"codeVoice","code":"response"},{"type":"text","text":" is decoded into a "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" object."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/mypackage\/httpconnection"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/MyPackage\/documentation\/MyPackage\/HttpConnection","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Wrapper arround "},{"type":"codeVoice","code":"HttpClient"},{"type":"text","text":" with ability to decode response in exepected type."}],"kind":"article","metadata":{"roleHeading":"Article","title":"HttpConnection","role":"article","modules":[{"name":"MyPackage"}]},"hierarchy":{"paths":[["doc:\/\/MyPackage\/documentation\/MyPackage"]]},"references":{"doc://MyPackage/documentation/MyPackage":{"role":"collection","title":"MyPackage","abstract":[],"identifier":"doc:\/\/MyPackage\/documentation\/MyPackage","kind":"symbol","type":"topic","url":"\/documentation\/mypackage"}}}